#
# example data flow config
#

import os
import time
import socket

def aton(ip):
    return socket.inet_aton(ip)

# add worker threads on a core and pause it
bess.add_worker(0,24)
bess.pause_all()

# initialize port0 and assign it to a dpdk port
port0::PMDPort(port_id=0)

# create vports and atach it to the containers (created externally)
v_mlocal_1 = VPort(ifname='v_mlocal_1', docker='mlocal_1', mac_addr='02:00:00:00:11:01', ip_addrs=['10.20.21.11/24'])
ans = raw_input("press enter after verifying interface: ")

v_mlocal_2 = VPort(ifname='v_mlocal_2', docker='mlocal_2', mac_addr='02:00:00:00:11:02', ip_addrs=['10.20.21.12/24'])
ans = raw_input("press enter after verifying interface: ")

#import pdb;
#pdb.set_trace()

print("Connection succesful")

pML1_in::PortInc(port=v_mlocal_1)
pML1_out::PortOut(port=v_mlocal_1)
pML2_in::PortInc(port=v_mlocal_2)
pML2_out::PortOut(port=v_mlocal_2)

p0_in::PortInc(port=port0)
p0_out::PortOut(port=port0)

# declare smart switch to route after setmetadata
sm1::SmartSwitch(dp_ids=["1964ddca-91c3-470a-a68b-d15ec9f4123c"])

# network guid for 10.20.21.0/24 1964ddca-91c3-470a-a68b-d15ec9f4123c
# port_id for v_mlocal_1         74d43679-7c00-4927-91dd-77783e652f63
# port_id for v_mlocal_2         9725d4f1-bb72-414a-8daf-e70e917af6a5

# -------------------------------------------------------------
# RGW Module will be doing these functionality
# match based on source IP (L4)

# L4 protocol and source/destination IP addresses
# offset 23 - protocol
# offset 26 src ip
# offset 30 dst ip -- we will only look at dst ip here
#
em1::ExactMatch(fields=[{'offset':23, 'num_bytes':1},\
                        {'offset':30, 'num_bytes':4}])

em1.add(fields=[{'value_int':17}, {'value_bin':aton('10.20.21.11')}], gate=0)
em1.add(fields=[{'value_int':17}, {'value_bin':aton('10.20.21.12')}], gate=1)

p0_in -> em1

em1:0 -> SetMetadata(attrs=[{'name':'port_id',\
                             'size': 16,\
                             'value_bin': b'\x74\xd4\x36\x79\x7c\x00\x49\x27\x91\xdd\x77\x78\x3e\x65\x2f\x63'}]) -> sm1:0
em1:1 -> SetMetadata(attrs=[{'name':'port_id',\
                             'size': 16,\
                             'value_bin': b'\x97\x25\xd4\xf1\xbb\x72\x41\x4a\x8d\xaf\xe7\x0e\x91\x7a\xf6\xa5'}]) -> sm1:0
# ------------------- end of RGW module ----------------------------------------------------

ret = sm1.attach(dp_id="1964ddca-91c3-470a-a68b-d15ec9f4123c", port_id="74d43679-7c00-4927-91dd-77783e652f63")
gate_pML1 = ret.gate
ret = sm1.attach(dp_id="1964ddca-91c3-470a-a68b-d15ec9f4123c", port_id="9725d4f1-bb72-414a-8daf-e70e917af6a5")
gate_pML2 = ret.gate

#sm1:gate_pML1 -> pML1_out
#pML1_in -> sm1:gate_pML1

#sm1:gate_pML2 -> pML2_out
#pML2_in -> sm1:gate_pML2

sm1:0 -> p0_out

bess.resume_all()

# wait for user command to exit
usercmd = "dontexit"
while (usercmd != "exit"):
     usercmd = raw_input("After test complete type 'exit': ")

bess.pause_all()
bess.reset_all()




